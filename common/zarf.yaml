# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/zarf/main/zarf.schema.json
kind: ZarfPackageConfig
metadata:
  name: artifactory-common
  description: "UDS Artifactory Common Package"

components:
  - name: artifactory
    required: true
    charts:
      - name: uds-artifactory-config
        namespace: artifactory
        version: 0.1.0
        localPath: ../chart
  # renovate: datasource=helm
      - name: artifactory
        namespace: artifactory
        url: https://charts.jfrog.io
        version: 107.104.14
        repoName: artifactory
        releaseName: artifactory
        valuesFiles:
          - ../values/common.yaml
    actions:
      onDeploy:
        after:
          - cmd: kubectl get secret artifactory-admin-credentials -n artifactory -o=jsonpath='{.data.adminCreds}' | sha256sum | cut -d ' ' -f1
            # mute: true
            setVariables:
              - name: CURRENT_SUM
                # sensitive: true
          - cmd: kubectl get sts artifactory -n artifactory -o=jsonpath='{.metadata.annotations.checksum/secret}' || true
            # mute: true
            setVariables:
              - name: ANNOTATION_SUM
                # sensitive: true
          - cmd: |
              if [[ -n "$ZARF_VAR_ANNOTATION_SUM" ]]; then
                if [[ "$ZARF_VAR_CURRENT_SUM" == "$ZARF_VAR_ANNOTATION_SUM" ]]; then
                  echo "Secret did not change"
                else
                  kubectl rollout restart sts artifactory -n artifactory
                  kubectl wait -n artifactory statefulset/artifactory --for='jsonpath={status.availableReplicas}'=0 --timeout=500s
                fi
              fi
              kubectl annotate --overwrite -n artifactory sts artifactory checksum/secret=${ZARF_VAR_CURRENT_SUM}
            shell:
              darwin: bash
              linux: bash
          - cmd: |
              ADMIN_USER=$(uds zarf tools kubectl get secret artifactory-admin-credentials -n artifactory -o=jsonpath='{.data.username}' | base64 -d)
              ADMIN_PASS=$(uds zarf tools kubectl get secret artifactory-admin-credentials -n artifactory -o=jsonpath='{.data.password}' | base64 -d)
              
              CLIENT_ID=$(uds zarf tools kubectl get secret artifactory-keycloak-client -n artifactory -o=jsonpath='{.data.artifactory_client_id}' | base64 -d)
              CLIENT_SECRET=$(uds zarf tools kubectl get secret artifactory-keycloak-client -n artifactory -o=jsonpath='{.data.artifactory_client_secret}' | base64 -d)
              AUTH_URL=$(uds zarf tools kubectl get secret artifactory-keycloak-client -n artifactory -o=jsonpath='{.data.keycloak_auth_url}' | base64 -d)
              API_URL=$(uds zarf tools kubectl get secret artifactory-keycloak-client -n artifactory -o=jsonpath='{.data.keycloak_api_url}' | base64 -d)
              TOKEN_URL=$(uds zarf tools kubectl get secret artifactory-keycloak-client -n artifactory -o=jsonpath='{.data.keycloak_token_url}' | base64 -d)
              
              echo "Setting up OpenID OAuth SSO using ${CLIENT_ID}"
              echo "Auth: ${AUTH_URL}"
              echo "Token: ${TOKEN_URL}"
              echo "API: ${API_URL}"
    
              curl -u "${ADMIN_USER}:${ADMIN_PASS}" -X POST "https://artifactory.${ZARF_VAR_DOMAIN}/artifactory/api/oauth" \
                  -H "Content-Type: application/json" \
                  -d @- <<EOF
              {
                  "enabled": false,
                  "persistUsers": true,
                  "allowUserToAccessProfile": true,
                  "groupClaimName": "groups",
                  "oauthProvidersSettings": [
                      {
                      "name": "Login with OpenID",
                      "type": "openid",
                      "clientId": "${CLIENT_ID}",
                      "clientSecret": "${CLIENT_SECRET}",
                      "authorizationEndpoint": "${AUTH_URL}",
                      "tokenEndpoint": "${TOKEN_URL}",
                      "userInfoEndpoint": "${API_URL}",
                      "scopes": ["openid", "profile", "email"]
                      }
                  ]
              }
              EOF
            shell:
              darwin: bash
              linux: bash
          - wait:
              cluster:
                kind: StatefulSet
                name: artifactory
                namespace: artifactory
                condition: "{.status.readyReplicas}=1"
